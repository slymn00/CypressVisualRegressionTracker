"use strict";
/* global Cypress, cy */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackBase64 = exports.trackBuffer = exports.trackImage = exports.checkResult = exports.toTestRunDto = exports.handleError = exports.log = void 0;
var log = function (message) {
    return Cypress.log({
        name: "Visual Regression Tracker",
        displayName: "VRT",
        message: message,
    });
};
exports.log = log;
var handleError = function (err) {
    if (err) {
        throw new Error(err);
    }
};
exports.handleError = handleError;
var toTestRunDto = function (_a) {
    var _b;
    var name = _a.name, _c = _a.pixelRatio, pixelRatio = _c === void 0 ? 1 : _c, options = _a.options;
    return ({
        name: name,
        browser: Cypress.browser.name,
        viewport: (_b = options === null || options === void 0 ? void 0 : options.viewport) !== null && _b !== void 0 ? _b : "".concat(Cypress.config("viewportWidth") * pixelRatio, "x").concat(Cypress.config("viewportHeight") * pixelRatio),
        os: options === null || options === void 0 ? void 0 : options.os,
        device: options === null || options === void 0 ? void 0 : options.device,
        customTags: options === null || options === void 0 ? void 0 : options.customTags,
        diffTollerancePercent: options === null || options === void 0 ? void 0 : options.diffTollerancePercent,
        ignoreAreas: options === null || options === void 0 ? void 0 : options.ignoreAreas,
        // next two properties actually do not belong to TestRunDto and ideally should be removed from this object
        keepScreenshot: options === null || options === void 0 ? void 0 : options.keepScreenshot,
        retryLimit: options === null || options === void 0 ? void 0 : options.retryLimit,
    });
};
exports.toTestRunDto = toTestRunDto;
var checkResult = function (result, errorCallback) {
    if (typeof result === "string") {
        // . this is an error message
        if (errorCallback) {
            if (errorCallback(result)) {
                return;
            }
        }
        (0, exports.handleError)(result);
    }
};
exports.checkResult = checkResult;
var trackImage = function (subject, name, options) {
    var imagePath;
    var pixelRatio;
    var target = subject ? cy.wrap(subject) : cy;
    return target
        .screenshot(name, __assign(__assign({}, options), { onAfterScreenshot: function (el, props) {
            imagePath = props.path;
            pixelRatio = props.pixelRatio;
            return options === null || options === void 0 ? void 0 : options.onAfterScreenshot;
        } }))
        .then(function () { return (0, exports.log)("tracking ".concat(name)); })
        .then(function () {
        return cy.task("VRT_TRACK", __assign(__assign({}, (0, exports.toTestRunDto)({ name: name, pixelRatio: pixelRatio, options: options })), { imagePath: imagePath }), { log: false });
    });
};
exports.trackImage = trackImage;
var trackBuffer = function (name, imageBuffer, options) {
    (0, exports.log)("tracking ".concat(name));
    return cy.task("VRT_TRACK", __assign(__assign({}, (0, exports.toTestRunDto)({ name: name, options: options })), { imageBuffer: imageBuffer }), { log: false });
};
exports.trackBuffer = trackBuffer;
var trackBase64 = function (name, imageBase64, options) {
    (0, exports.log)("tracking ".concat(name));
    return cy.task("VRT_TRACK", __assign(__assign({}, (0, exports.toTestRunDto)({ name: name, options: options })), { imageBase64: imageBase64 }), { log: false });
};
exports.trackBase64 = trackBase64;
